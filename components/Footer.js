import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Keyboard,
  ActivityIndicator,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { TextInput, Alert } from "react-native";
import { useState, useEffect, useRef } from "react";
import { useChat } from "../context/ChatContext"; // Ï±ÑÌåÖ Ïª®ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
import { useNavigation, useRoute } from "@react-navigation/native"; // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï∂îÍ∞Ä
import * as FileSystem from "expo-file-system";
import { Audio } from "expo-av";
import { Animated, Easing } from "react-native"; // Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä

export default function Footer() {
  const [message, setMessage] = useState("");
  const { addMessage, isLoading } = useChat();
  const navigation = useNavigation(); // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Í∞ùÏ≤¥
  const route = useRoute(); // ÌòÑÏû¨ Í≤ΩÎ°ú

  const recordingRef = useRef(null);
  const [recording, setRecording] = useState(false);

  // 1. ÏûêÎèô Ï†ÑÏÜ°ÏùÑ ÏúÑÌïú ref ÏÇ¨Ïö©
  const isAutoSending = useRef(false);

  const scaleAnim = useRef(new Animated.Value(1)).current; // Ïï†ÎãàÎ©îÏù¥ÏÖò

  // 2. messageÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îïå ÏûêÎèô Ï†ÑÏÜ°
  useEffect(() => {
    if (isAutoSending.current && message.trim() !== "") {
      handleSendMessage();
      isAutoSending.current = false;
    }
  }, [message]);

  // ÏùåÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ìò∏Ï∂ú Ìï®Ïàò
  const handleVoiceInput = async () => {
    try {
      if (!recording) {
        // üé§ ÎÖπÏùå ÏãúÏûë
        const permission = await Audio.requestPermissionsAsync();
        if (permission.status !== "granted") {
          console.log("‚õî ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
          return;
        }

        await Audio.setAudioModeAsync({
          allowsRecordingIOS: true,
          playsInSilentModeIOS: true,
        });

        const { recording } = await Audio.Recording.createAsync(
          Audio.RecordingOptionsPresets.HIGH_QUALITY
        );
        recordingRef.current = recording;
        setRecording(recording);
        console.log("üéôÔ∏è ÎÖπÏùå ÏãúÏûë");

        // ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï (7Ï¥à ÌõÑ ÏûêÎèô Ï¢ÖÎ£å)
        setTimeout(async () => {
          if (recordingRef.current) {
            await recordingRef.current.stopAndUnloadAsync();
            const uri = recordingRef.current.getURI();
            console.log("‚úÖ ÌÉÄÏù¥Î®∏ Ï¢ÖÎ£åÎ°ú ÎÖπÏùå Ï¢ÖÎ£å: ", uri);
            setRecording(null);

            const base64 = await FileSystem.readAsStringAsync(uri, {
              encoding: FileSystem.EncodingType.Base64,
            });

            console.log("üì¶ Base64 (ÏïûÎ∂ÄÎ∂Ñ):", base64.slice(0, 100) + "...");
            // ÏÑúÎ≤ÑÏóê Ï†ÑÏÜ°
            const response = await fetch(
              `http://3.106.58.224:3000/speech/transcribe`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ base64Audio: base64 }),
              }
            );
            if (!response.ok) {
              throw new Error(`Server error: ${response.status}`);
            }
            // 5) ÏÑúÎ≤Ñ ÏùëÎãµ Ï†ÄÏû•
            const data = await response.json();
            console.log("üéß Î≥ÄÌôòÎêú ÌÖçÏä§Ìä∏:", data.response);
            setMessage(data.response);
          }
        }, 7000); // 7Ï¥à ÌõÑ ÏûêÎèô Ï¢ÖÎ£å
      } else {
        // ‚èπÔ∏è ÎÖπÏùå Ï¢ÖÎ£å + base64 Î≥ÄÌôò
        await recordingRef.current.stopAndUnloadAsync();
        const uri = recordingRef.current.getURI();
        console.log("‚úÖ ÎÖπÏùå Ï¢ÖÎ£å: ", uri);
        setRecording(null);

        const base64 = await FileSystem.readAsStringAsync(uri, {
          encoding: FileSystem.EncodingType.Base64,
        });

        console.log("üì¶ Base64 (ÏïûÎ∂ÄÎ∂Ñ):", base64.slice(0, 100) + "...");
        // serverÏóê Ï†ÑÏÜ°
        const response = await fetch(
          `http://3.106.58.224:3000/speech/transcribe`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ base64Audio: base64 }),
          }
        );
        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }
        // 5) ÏÑúÎ≤Ñ ÏùëÎãµ Ï†ÄÏû•
        const data = await response.json();
        console.log("üéß Î≥ÄÌôòÎêú ÌÖçÏä§Ìä∏:", data.response);

        setMessage(data.response);
        isAutoSending.current = true; // ÏûêÎèô Ï†ÑÏÜ° ÏÑ§Ï†ï
      }
    } catch (error) {
      console.error("‚ùó handleVoiceInput Ïò§Î•ò:", error);
    }
  };
  // ÏùåÏÑ± Î≤ÑÌäº Ïï†ÎãàÎ©îÏù¥ÏÖò
  useEffect(() => {
    if (recording) {
      Animated.loop(
        Animated.sequence([
          Animated.timing(scaleAnim, {
            toValue: 1.5,
            duration: 500,
            useNativeDriver: true,
          }),
          Animated.timing(scaleAnim, {
            toValue: 1,
            duration: 500,
            useNativeDriver: true,
          }),
        ])
      ).start();
    } else {
      // üîö ÎÖπÏùå Ï§ëÏù¥ ÏïÑÎãàÎ©¥ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï§ëÎã® Î∞è Ï¥àÍ∏∞Ìôî
      scaleAnim.setValue(1);
    }
  }, [recording]);

  // Î©îÏãúÏßÄ Ï†ÑÏÜ° Î≤ÑÌäº
  const handleSendMessage = () => {
    if (message.trim() === "" || isLoading) return;

    // Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∞è ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
    addMessage(message);
    setMessage("");

    // ÌÇ§Î≥¥Îìú ÎÇ¥Î¶¨Í∏∞
    Keyboard.dismiss();

    // ÌòÑÏû¨ ÌôîÎ©¥Ïù¥ MainÏù¥ ÏïÑÎãàÎ©¥ MainÏúºÎ°ú Ïù¥Îèô
    if (route.name !== "Main") {
      // ÌÇ§Î≥¥ÎìúÍ∞Ä ÎÇ¥Î†§Í∞Ñ ÌõÑ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïã§Ìñâ
      setTimeout(() => {
        navigation.navigate("Main");
      }, 50); // 50ms ÏßÄÏó∞
    }
  };

  return (
    <View style={styles.footer}>
      <View style={styles.inputContainer}>
        <View
          style={[
            styles.promptBox,
            isLoading && styles.promptBoxDisabled,
            recording && { opacity: 0.3 },
          ]}
        >
          <View style={styles.PromptInput}>
            <TextInput
              style={styles.textInput}
              placeholder={
                isLoading ? "Waiting for message..." : "Type your message..."
              }
              placeholderTextColor={isLoading ? "#999" : "#888"}
              value={message}
              onChangeText={setMessage}
              onSubmitEditing={handleSendMessage}
              editable={!isLoading && !recording}
            />
          </View>
          <TouchableOpacity
            style={[styles.sendButton, isLoading && styles.buttonDisabled]}
            onPress={handleSendMessage}
            disabled={isLoading}
          >
            {isLoading ? (
              <ActivityIndicator size="small" color="white" />
            ) : (
              <MaterialIcons name="send" size={24} color="white" />
            )}
          </TouchableOpacity>
        </View>
        <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
          <TouchableOpacity
            style={[styles.voiceButton, isLoading && styles.buttonDisabled]}
            onPress={handleVoiceInput}
            disabled={isLoading}
          >
            <MaterialIcons name="keyboard-voice" size={24} color="white" />
          </TouchableOpacity>
        </Animated.View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  footer: {
    height: 120,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
  },
  promptBox: {
    flexDirection: "row",
    alignItems: "center",
    width: "70%",
    height: 60,
    backgroundColor: "#F5F7FE",
    borderRadius: 40,
    paddingHorizontal: 20,
    marginRight: 12,
  },
  promptBoxDisabled: {
    backgroundColor: "#F0F0F0",
    opacity: 0.8,
  },
  PromptInput: {
    flex: 1,
    height: 40,
    borderRadius: 20,
    paddingHorizontal: 10,
  },
  sendButton: {
    backgroundColor: "#6DC0ED",
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
  },
  voiceButton: {
    backgroundColor: "#6DC0ED",
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
  },
  buttonDisabled: {
    backgroundColor: "#A9D7F0",
    opacity: 0.7,
  },
  textInput: {
    fontSize: 16,
    fontFamily: "Outfit", // Ìè∞Ìä∏ ÏÑ§Ï†ï
    color: "black",
  },
});
